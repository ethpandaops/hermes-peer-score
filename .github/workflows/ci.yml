name: Peer Score CI

on:
  schedule:
    # Run daily at 11 AM UTC
    - cron: '0 11 * * *'
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration (e.g., 10m, 30m, 1h)'
        default: '30m'
        required: false
      chain:
        description: 'Chain'
        default: 'mainnet'
        required: false
      region:
        description: 'Prysm region'
        type: choice
        options:
          - SFO
          - SYD
        default: 'SFO'
        required: false

jobs:
  peer-score-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Build Latest Hermes
        run: |
          # Clone and build latest hermes from source
          git clone https://github.com/ethpandaops/hermes.git hermes-repo
          cd hermes-repo
          LATEST_COMMIT=$(git rev-parse --short HEAD)
          go build -o ../hermes ./cmd/hermes
          cd ..
          chmod +x ./hermes
          echo "Built Hermes from commit: $LATEST_COMMIT"

      - name: Build Peer Score Tool
        run: |
          go mod tidy
          go build -o peer-score-tool

      - name: Run Peer Score Test
        env:
          DURATION: ${{ github.event.inputs.duration || '30m' }}
          CHAIN: ${{ github.event.inputs.chain || 'mainnet' }}
          REGION: ${{ github.event.inputs.region || 'SFO' }}
        run: |
          # Select Prysm host based on region
          if [ "$REGION" = "SYD" ]; then
            PRYSM_HOST="${{ secrets.PRYSM_HOST_SYD }}"
          else
            PRYSM_HOST="${{ secrets.PRYSM_HOST_SFO }}"
          fi

          echo "Using Prysm host in $REGION region"

          # Use optimized split format for better performance
          ./peer-score-tool \
            --prysm-host="$PRYSM_HOST" \
            --prysm-http-port=443 \
            --prysm-grpc-port=443 \
            --duration="$DURATION" \
            --output=peer-score-report.json \
            --split-reports=true

      - name: Setup Reports Directory
        run: |
          mkdir -p reports
          
          # Check if split format was used (directory exists) or legacy format (single file)
          if [ -d peer-score-report ]; then
            echo "Split format detected - copying optimized report structure"
            # Copy the entire split report directory structure
            cp -r peer-score-report/* reports/
            
            # Verify the optimized HTML exists
            if [ ! -f reports/index.html ]; then
              echo "ERROR: Optimized HTML report not found in split format"
              exit 1
            fi
            
            echo "✅ Split format reports copied successfully"
            echo "📊 Report structure:"
            ls -la reports/
            
          elif [ -f peer-score-report.json ]; then
            echo "Legacy format detected - copying monolithic files"
            # Copy legacy JSON report
            cp peer-score-report.json reports/
            
            # Copy legacy HTML report
            if [ -f peer-score-report.html ]; then
              cp peer-score-report.html reports/index.html
            else
              echo "ERROR: Legacy HTML report not found"
              exit 1
            fi
            
            echo "✅ Legacy format reports copied successfully"
            
          else
            echo "ERROR: No reports found (neither split nor legacy format)"
            exit 1
          fi

      - name: Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: peer-score-reports-${{ github.run_number }}
          path: reports/
          retention-days: 30

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

      - name: Parse Report Results
        id: results
        run: |
          # Determine which format to parse based on what exists
          if [ -f reports/summary.json ]; then
            echo "📊 Parsing split format reports..."
            # Parse split format - use summary.json and peer-index.json
            summary_file="reports/summary.json"
            peer_index_file="reports/peer-index.json"
            
            # Extract data from split format
            total_connections=$(jq -r '.total_connections // 0' "$summary_file")
            successful_handshakes=$(jq -r '.successful_handshakes // 0' "$summary_file")
            failed_handshakes=$(jq -r '.failed_handshakes // 0' "$summary_file")
            unique_peers=$(jq -r '.peer_count // 0' "$summary_file")
            duration_seconds=$(jq -r '.duration / 1000000000' "$summary_file")
            test_duration=$(jq -r '.config.test_duration / 1000000000' "$summary_file")
            
            # Count unique client types from peer index
            unique_clients=$(jq -r '[.peers[].client_type] | unique | length' "$peer_index_file")
            
            # Count total events from peer index
            total_events=$(jq -r '[.peers[].total_event_count] | add // 0' "$peer_index_file")
            
            echo "format=split" >> $GITHUB_OUTPUT
            
          elif [ -f reports/peer-score-report.json ]; then
            echo "📊 Parsing legacy format reports..."
            # Parse legacy format
            report_file="reports/peer-score-report.json"
            
            # Extract data from legacy format
            total_connections=$(jq -r '.total_connections // 0' "$report_file")
            successful_handshakes=$(jq -r '.successful_handshakes // 0' "$report_file")
            failed_handshakes=$(jq -r '.failed_handshakes // 0' "$report_file")
            unique_peers=$(jq -r '.peers | length' "$report_file")
            duration_seconds=$(jq -r '.duration / 1000000000' "$report_file")
            test_duration=$(jq -r '.config.test_duration / 1000000000' "$report_file")
            
            # Count unique client types
            unique_clients=$(jq -r '[.peers[].client_type] | unique | length' "$report_file")
            
            # Count total events
            total_events=$(jq -r '[.peer_event_counts[] | add] | add // 0' "$report_file")
            
            echo "format=legacy" >> $GITHUB_OUTPUT
            
          else
            echo "❌ No parseable report found"
            exit 1
          fi
          
          # Calculate success rate
          if [ "$total_connections" -gt 0 ]; then
            success_rate=$(echo "scale=1; $successful_handshakes * 100 / $total_connections" | bc)
          else
            success_rate="0"
          fi
          
          # Set common outputs
          echo "connections=$total_connections" >> $GITHUB_OUTPUT
          echo "successful_handshakes=$successful_handshakes" >> $GITHUB_OUTPUT
          echo "failed_handshakes=$failed_handshakes" >> $GITHUB_OUTPUT
          echo "success_rate=$success_rate" >> $GITHUB_OUTPUT
          echo "unique_peers=$unique_peers" >> $GITHUB_OUTPUT
          echo "unique_clients=$unique_clients" >> $GITHUB_OUTPUT
          echo "duration_seconds=$duration_seconds" >> $GITHUB_OUTPUT
          echo "test_duration=$test_duration" >> $GITHUB_OUTPUT
          echo "total_events=$total_events" >> $GITHUB_OUTPUT

      - name: Generate Summary
        run: |
          # Use the parsed results
          connections=${{ steps.results.outputs.connections }}
          successful_handshakes=${{ steps.results.outputs.successful_handshakes }}
          failed_handshakes=${{ steps.results.outputs.failed_handshakes }}
          success_rate=${{ steps.results.outputs.success_rate }}
          unique_peers=${{ steps.results.outputs.unique_peers }}
          unique_clients=${{ steps.results.outputs.unique_clients }}
          duration_seconds=${{ steps.results.outputs.duration_seconds }}
          test_duration=${{ steps.results.outputs.test_duration }}
          total_events=${{ steps.results.outputs.total_events }}
          report_format=${{ steps.results.outputs.format }}

          {
            echo "## 🔗 Peer Score Report"
            echo ""
            if [ "$report_format" = "split" ]; then
              echo "### 🚀 Optimized Report Format"
              echo "This report uses the new **split format** for better performance:"
              echo "- ⚡ Fast loading (~50KB initial load vs 25MB+ monolithic)"
              echo "- 🎯 Progressive data loading (load peer details on-demand)"
              echo "- 🔍 Built-in search and filtering capabilities"
              echo ""
            else
              echo "### 📄 Legacy Report Format"
              echo "This report uses the legacy monolithic format."
              echo ""
            fi
            echo "### Test Configuration"
            echo "- **Test Duration:** ${test_duration}s"
            echo "- **Actual Duration:** ${duration_seconds}s"
            echo "- **Report Format:** $report_format"
            echo ""
            echo "### Connection Statistics"
            echo "- **Total Connections:** $connections"
            echo "- **Successful Handshakes:** $successful_handshakes"
            echo "- **Failed Handshakes:** $failed_handshakes"
            echo "- **Success Rate:** ${success_rate}%"
            echo ""
            echo "### Network Diversity"
            echo "- **Unique Peers Discovered:** $unique_peers"
            echo "- **Unique Client Types:** $unique_clients"
            echo "- **Total Events Captured:** $total_events"
            echo ""
            echo "### Report Access"
            echo "- 📊 [Interactive HTML Report](https://ethpandaops.github.io/hermes-peer-score/)"
            if [ "$report_format" = "split" ]; then
              echo "- 📋 [Summary Data](https://ethpandaops.github.io/hermes-peer-score/summary.json)"
              echo "- 👥 [Peer Index](https://ethpandaops.github.io/hermes-peer-score/peer-index.json)"
              echo "- 📁 [Individual Peer Data](https://ethpandaops.github.io/hermes-peer-score/peers/)"
            else
              echo "- 📄 [Raw JSON Data](https://ethpandaops.github.io/hermes-peer-score/peer-score-report.json)"
            fi
            echo ""
            echo "_Report generated on $(date) using latest Hermes with optimized reporting_"
          } >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: peer-score-test
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
