name: Delegated Validation CI

on:
  schedule:
    # Run daily at 11 AM UTC - Delegated validation using Prysm
    - cron: '0 11 * * *'
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration (e.g., 5m, 10m, 30m)'
        default: '30m'
        required: false
      chain:
        description: 'Chain'
        default: 'mainnet'
        required: false
      region:
        description: 'Prysm region'
        type: choice
        options:
          - SFO
          - SYD
        default: 'SFO'
        required: false

jobs:
  delegated-validation-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Configure Go Module for Delegated Validation
        run: |
          echo "🔗 Configuring Go module for delegated validation mode"
          
          # Update go.mod for delegated validation using the built-in function
          go run . --validation-mode=delegated --update-go-mod
          
          # Ensure dependencies are properly resolved
          go mod tidy
          
          # Show the go.mod changes
          echo "Go module configuration:"
          cat go.mod | grep -A5 -B5 "hermes\|replace" || echo "No replace directives found"

      - name: Build Peer Score Tool
        run: |
          echo "🔧 Building peer score tool for delegated validation"
          go build -o peer-score-tool

      - name: Validate Go Module Configuration
        run: |
          echo "✅ Validating Go module configuration for delegated validation"
          go run . --validation-mode=delegated --validate-go-mod

      - name: Run Delegated Validation Test
        env:
          DURATION: ${{ github.event.inputs.duration || '30m' }}
          CHAIN: ${{ github.event.inputs.chain || 'mainnet' }}
          REGION: ${{ github.event.inputs.region || 'SFO' }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Select Prysm host based on region
          if [ "$REGION" = "SYD" ]; then
            PRYSM_HOST="${{ secrets.PRYSM_HOST_SYD }}"
          else
            PRYSM_HOST="${{ secrets.PRYSM_HOST_SFO }}"
          fi

          echo "🔗 Running delegated validation test using Prysm host in $REGION region"

          ./peer-score-tool \
            --validation-mode=delegated \
            --prysm-host="$PRYSM_HOST" \
            --prysm-http-port=443 \
            --prysm-grpc-port=443 \
            --duration="$DURATION"

      - name: Generate HTML Report
        run: |
          # Debug: List all files in the working directory
          echo "📁 Current working directory contents:"
          ls -la
          
          echo "🔍 Looking for JSON files with any pattern:"
          ls -la *.json 2>/dev/null || echo "No .json files found"
          
          echo "🔍 Looking for delegated JSON files specifically:"
          ls -la *delegated*.json 2>/dev/null || echo "No delegated .json files found"
          
          # Find the timestamped delegated JSON file
          DELEGATED_JSON=$(ls peer-score-report-delegated-*.json 2>/dev/null | head -1)
          if [ -n "$DELEGATED_JSON" ] && [ -f "$DELEGATED_JSON" ]; then
            echo "📊 Generating HTML report for delegated validation"
            
            # Create timestamp-based directory structure
            TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
            DATE_DIR=$(date -u +"%Y-%m-%d")
            MODE_DIR="delegated"

            # Ensure the reports directory structure exists
            mkdir -p reports/$DATE_DIR/$MODE_DIR

            # Check if this is a same-day re-run and preserve existing reports
            if [ -d "reports/$DATE_DIR/$MODE_DIR" ] && [ "$(ls -A reports/$DATE_DIR/$MODE_DIR 2>/dev/null)" ]; then
              echo "Found existing delegated reports for $DATE_DIR, they will be preserved"
              ls -la "reports/$DATE_DIR/$MODE_DIR/"
            fi

            echo "Found JSON report: $DELEGATED_JSON"
            
            # Extract the generated timestamp from the filename
            GENERATED_TIMESTAMP=$(echo "$DELEGATED_JSON" | sed 's/peer-score-report-delegated-\(.*\)\.json/\1/')
            echo "Extracted timestamp: $GENERATED_TIMESTAMP"
            
            # Copy JSON report with the same timestamp format
            cp "$DELEGATED_JSON" "reports/$DATE_DIR/peer-score-report-$GENERATED_TIMESTAMP-delegated.json"

            # Find and copy HTML report (should be generated automatically by tool)
            DELEGATED_HTML=$(ls peer-score-report-delegated-*.html 2>/dev/null | head -1)
            if [ -n "$DELEGATED_HTML" ] && [ -f "$DELEGATED_HTML" ]; then
              echo "Found HTML report: $DELEGATED_HTML"
              cp "$DELEGATED_HTML" "reports/$DATE_DIR/peer-score-report-$GENERATED_TIMESTAMP-delegated.html"

              # Copy the JavaScript data file that's generated with the HTML report
              DELEGATED_JS=$(ls peer-score-report-delegated-*-data.js 2>/dev/null | head -1)
              if [ -n "$DELEGATED_JS" ] && [ -f "$DELEGATED_JS" ]; then
                echo "Found JS data file: $DELEGATED_JS"
                cp "$DELEGATED_JS" "reports/$DATE_DIR/peer-score-report-$GENERATED_TIMESTAMP-delegated-data.js"
              else
                echo "Warning: JavaScript data file not found, HTML report may not function properly"
              fi

            else
              echo "HTML report not found, tool may have failed to generate it"
              exit 1
            fi
          else
            echo "No JSON report found"
            exit 1
          fi

      - name: Generate Historical Index
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          VALIDATION_MODE: 'delegated'
        run: |
          # Download existing reports manifest from GitHub Pages to preserve history
          echo "Attempting to preserve existing delegated reports from GitHub Pages using manifest..."

          # Try to download the existing reports manifest
          MANIFEST_URL="https://${{ github.repository_owner }}.github.io/hermes-peer-score/reports-manifest.json"
          echo "Downloading reports manifest from: $MANIFEST_URL"

          if curl -f -s "$MANIFEST_URL" -o reports-manifest.json 2>/dev/null; then
            echo "Found existing reports manifest, downloading historical delegated reports..."

            # Set cutoff date for 28-day retention
            CUTOFF_DATE=$(date -u -d "28 days ago" +"%Y-%m-%d")
            echo "Cutoff date for retention: $CUTOFF_DATE"

            # Download historical reports using the manifest
            CUTOFF_DATE="$CUTOFF_DATE" VALIDATION_MODE="delegated" python3 scripts/download_reports.py
          else
            echo "No existing reports manifest found - this might be the first delegated run"
          fi

          # Clean up any delegated reports older than 28 days
          echo "Cleaning up delegated reports older than 28 days..."
          find reports -type f -name "*delegated*.json" | while read file; do
            # Extract date from filename or path
            FILE_DATE=$(echo "$file" | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' | head -1)
            if [ -n "$FILE_DATE" ]; then
              FILE_EPOCH=$(date -d "$FILE_DATE" +%s 2>/dev/null || echo "0")
              CUTOFF_EPOCH=$(date -d "28 days ago" +%s)

              if [ "$FILE_EPOCH" -lt "$CUTOFF_EPOCH" ] && [ "$FILE_EPOCH" -gt "0" ]; then
                echo "Removing old delegated report: $file"
                rm -f "$file"
                # Also remove corresponding HTML and JS files
                rm -f "${file%.json}.html"
                rm -f "${file%.json}-data.js"
              fi
            fi
          done

          echo "Delegated cleanup complete, generating new index..."

          # Generate the historical index page and manifest
          python3 scripts/generate_index.py

      - name: Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: delegated-validation-reports-${{ github.run_number }}
          path: reports/
          retention-days: 30

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

      - name: Parse Report Results
        id: results
        run: |
          # Find the timestamped delegated JSON file
          DELEGATED_JSON=$(ls peer-score-report-delegated-*.json 2>/dev/null | head -1)
          if [ -n "$DELEGATED_JSON" ] && [ -f "$DELEGATED_JSON" ]; then
            echo "Parsing results from: $DELEGATED_JSON"
            # Extract data from the new JSON format
            validation_mode=$(jq -r '.validation_mode // "delegated"' "$DELEGATED_JSON")
            hermes_version=$(jq -r '.validation_config.hermes_version // "unknown"' "$DELEGATED_JSON")
            total_connections=$(jq -r '.total_connections // 0' "$DELEGATED_JSON")
            successful_handshakes=$(jq -r '.successful_handshakes // 0' "$DELEGATED_JSON")
            failed_handshakes=$(jq -r '.failed_handshakes // 0' "$DELEGATED_JSON")
            unique_peers=$(jq -r '.peers | length' "$DELEGATED_JSON")
            duration_seconds=$(jq -r '.duration / 1000000000' "$DELEGATED_JSON")
            test_duration=$(jq -r '.config.TestDuration / 1000000000' "$DELEGATED_JSON")
            
            # Extract validation metrics (these fields were removed, so default to 0)
            validation_success_rate=0
            avg_latency_ms=0
            messages_per_sec=0
            error_rate=0

            # Count unique client types
            unique_clients=$(jq -r '[.peers[].client_type] | unique | length' "$DELEGATED_JSON")

            # Calculate success rate
            if [ "$total_connections" -gt 0 ]; then
              success_rate=$(echo "scale=1; $successful_handshakes * 100 / $total_connections" | bc)
            else
              success_rate="0"
            fi

            # Count total events
            total_events=$(jq -r '[.peer_event_counts[] | add] | add // 0' "$DELEGATED_JSON")

            # Set outputs
            echo "validation_mode=$validation_mode" >> $GITHUB_OUTPUT
            echo "hermes_version=$hermes_version" >> $GITHUB_OUTPUT
            echo "connections=$total_connections" >> $GITHUB_OUTPUT
            echo "successful_handshakes=$successful_handshakes" >> $GITHUB_OUTPUT
            echo "failed_handshakes=$failed_handshakes" >> $GITHUB_OUTPUT
            echo "success_rate=$success_rate" >> $GITHUB_OUTPUT
            echo "unique_peers=$unique_peers" >> $GITHUB_OUTPUT
            echo "unique_clients=$unique_clients" >> $GITHUB_OUTPUT
            echo "duration_seconds=$duration_seconds" >> $GITHUB_OUTPUT
            echo "test_duration=$test_duration" >> $GITHUB_OUTPUT
            echo "total_events=$total_events" >> $GITHUB_OUTPUT
            echo "validation_success_rate=$validation_success_rate" >> $GITHUB_OUTPUT
            echo "avg_latency_ms=$avg_latency_ms" >> $GITHUB_OUTPUT
            echo "messages_per_sec=$messages_per_sec" >> $GITHUB_OUTPUT
            echo "error_rate=$error_rate" >> $GITHUB_OUTPUT
          else
            echo "No JSON report found"
            exit 1
          fi

      - name: Generate Summary
        run: |
          # Use the parsed results
          validation_mode=${{ steps.results.outputs.validation_mode }}
          hermes_version=${{ steps.results.outputs.hermes_version }}
          connections=${{ steps.results.outputs.connections }}
          successful_handshakes=${{ steps.results.outputs.successful_handshakes }}
          failed_handshakes=${{ steps.results.outputs.failed_handshakes }}
          success_rate=${{ steps.results.outputs.success_rate }}
          unique_peers=${{ steps.results.outputs.unique_peers }}
          unique_clients=${{ steps.results.outputs.unique_clients }}
          duration_seconds=${{ steps.results.outputs.duration_seconds }}
          test_duration=${{ steps.results.outputs.test_duration }}
          total_events=${{ steps.results.outputs.total_events }}
          validation_success_rate=${{ steps.results.outputs.validation_success_rate }}
          avg_latency_ms=${{ steps.results.outputs.avg_latency_ms }}
          messages_per_sec=${{ steps.results.outputs.messages_per_sec }}
          error_rate=${{ steps.results.outputs.error_rate }}

          {
            echo "## 🔗 Delegated Validation Report"
            echo ""
            echo "### Validation Configuration"
            echo "- **Mode:** Delegated Validation (via Prysm)"
            echo "- **Hermes Version:** $hermes_version"
            echo "- **Test Duration:** ${test_duration}s"
            echo "- **Actual Duration:** ${duration_seconds}s"
            echo ""
            echo "### Connection Statistics"
            echo "- **Total Connections:** $connections"
            echo "- **Successful Handshakes:** $successful_handshakes"
            echo "- **Failed Handshakes:** $failed_handshakes"
            echo "- **Success Rate:** ${success_rate}%"
            echo ""
            echo "### Validation Performance"
            echo "- **Validation Success Rate:** $(echo "scale=1; $validation_success_rate * 100" | bc)%"
            echo "- **Average Latency:** ${avg_latency_ms}ms"
            echo "- **Message Processing Rate:** ${messages_per_sec} msg/sec"
            echo "- **Error Rate:** $(echo "scale=2; $error_rate * 100" | bc)%"
            echo ""
            echo "### Network Diversity"
            echo "- **Unique Peers Discovered:** $unique_peers"
            echo "- **Unique Client Types:** $unique_clients"
            echo "- **Total Events Captured:** $total_events"
            echo ""
            echo "### Report Files"
            echo "- 📊 [Interactive HTML Report](https://ethpandaops.github.io/hermes-peer-score/)"
            echo "- 📄 [Raw JSON Data](https://ethpandaops.github.io/hermes-peer-score/)"
            echo ""
            echo "_Delegated validation report generated on $(date) using Hermes $hermes_version_"
          } >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: delegated-validation-test
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4