---
description: Project architecture and structure guidelines
alwaysApply: true
---

# Hermes Peer Score Tool - Project Architecture

## Overview
This is a standalone Go CLI tool for analyzing Ethereum network peer connection health and performance using Hermes as a gossipsub listener for beacon nodes.

## Core Components

### Main Application (`main.go`)
- Entry point with CLI flag parsing and orchestration
- Handles graceful shutdown and signal management
- Supports both peer scoring tests and HTML-only report generation
- Integrates with OpenRouter API for AI-powered analysis

### Core Analysis Engine
- `peer_score_tool.go` - Main tool implementation for peer scoring
- `analyze.go` - Analysis logic for peer connection data
- `events.go` - Event handling and processing

### Configuration Management
- `config.go` - Configuration structures and validation
- `types.go` - Core data types and structures

### Reporting System
- `report.go` - JSON report generation
- `html_report.go` - HTML report generation with optional AI analysis
- `index-template.html` - HTML template for reports

### Build and Deployment
- `scripts/` - Python scripts for report management
  - `download_reports.py` - Download historical reports
  - `generate_index.py` - Generate index pages for report collections

## Key Dependencies
- **Hermes**: Core gossipsub listener (github.com/probe-lab/hermes)
- **Prysm**: Ethereum consensus client integration
- **Xatu**: Ethereum data processing toolkit
- **libp2p**: Peer-to-peer networking stack
- **Logrus**: Structured logging

## Architecture Patterns
- Single-binary CLI tool design
- Event-driven peer monitoring
- Concurrent connection management with mutex protection
- Report generation with optional AI enhancement
- Graceful shutdown handling

## File Organization
- Root level contains core Go files
- `scripts/` contains auxiliary Python tools
- Generated reports use `.json` and `.html` formats
- Configuration handled through CLI flags and environment variables

## Integration Points
- Connects to Prysm beacon nodes via gRPC/HTTP
- Uses Hermes for gossipsub network monitoring
- Optional integration with OpenRouter API for AI analysis
- Supports both local execution and CI/CD pipeline integration